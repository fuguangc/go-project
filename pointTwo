# 测试网发起一笔ERC20 token的转账，并广播到链上，不限制链，只要是EVM系即可
from web3 import Web3
import json

# 连接到以太坊测试网，例如Ropsten（或者其他EVM兼容链）
infura_url = 'https://ropsten.infura.io/v3/YOUR_INFURA_PROJECT_ID'
web3 = Web3(Web3.HTTPProvider(infura_url))

# 检查连接是否成功
if web3.isConnected():
    print("Connected to Ethereum network.")
else:
    print("Failed to connect to Ethereum network.")
    exit()

# 设置交易参数
sender_address = 'https://purple-magical-scion.btc.quiknode.pro/a3312fcaaf9d15dde15f7bd8af1ed553336b785e'
receiver_address = 'https://purple-magical-scion.btc.quiknode.pro/a3312fcaaf9d15dde15f7bd8af1ed553336b785e'
private_key = 'QN_a22255b2370d436894c1207c1abe3d36'

# ERC20 合约地址和 ABI
erc20_contract_address = 'ERC20_CONTRACT_ADDRESS'
erc20_abi = json.loads('[ERC20_CONTRACT_ABI]')

erc20_contract = web3.eth.contract(address=erc20_contract_address, abi=erc20_abi)

token_amount = web3.toWei(1, 'ether')  

# 构造交易
nonce = web3.eth.getTransactionCount(sender_address)
tx = erc20_contract.functions.transfer(receiver_address, token_amount).buildTransaction({
    'chainId': 3,  
    'gas': 200000,
    'gasPrice': web3.toWei('20', 'gwei'),
    'nonce': nonce,
})

signed_tx = web3.eth.account.sign_transaction(tx, private_key)

# 广播交易
tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
print(f"Transaction sent with hash: {web3.toHex(tx_hash)}")
