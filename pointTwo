# 测试网发起一笔ERC20 token的转账，并广播到链上，不限制链，只要是EVM系即可
from web3 import Web3

# 配置EVM兼容链测试网的RPC URL
rpc_url = "https://goerli.infura.io/v3/xiaomeiqiu1234@163.com"  

web3 = Web3(Web3.HTTPProvider(rpc_url))

if web3.isConnected():
    print("Connected to Goerli testnet")

# 发起者和接收者的信息
from_address = "https://purple-magical-scion.btc.quiknode.pro/a3312fcaaf9d15dde15f7bd8af1ed553336b785e"
private_key = "QN_a22255b2370d436894c1207c1abe3d36"
to_address = "0x接收者地址"

# ERC20合约的地址和ABI
token_contract_address = "0xERC20代币合约地址"
token_abi = [...]  # ERC20合约的ABI，通常可以从Etherscan获取

# 连接到ERC20合约
token_contract = web3.eth.contract(address=token_contract_address, abi=token_abi)

nonce = web3.eth.getTransactionCount(from_address)
tx = {
    'nonce': nonce,
    'to': token_contract_address,
    'value': 0,
    'gas': 200000,
    'gasPrice': web3.toWei('10', 'gwei')
}

transfer_function = token_contract.functions.transfer(to_address, web3.toWei(10, 'ether'))  # 发送10个代币
tx['data'] = transfer_function.buildTransaction({'chainId': 5, 'gas': 200000, 'gasPrice': web3.toWei('10', 'gwei'), 'nonce': nonce})['data']

signed_tx = web3.eth.account.sign_transaction(tx, private_key)

# 广播交易
tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
print(f"Transaction sent with hash: {web3.toHex(tx_hash)}")
